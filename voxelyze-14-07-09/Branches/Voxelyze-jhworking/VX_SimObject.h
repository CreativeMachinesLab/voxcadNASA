/*******************************************************************************
Copyright (c) 2010, Jonathan Hiller (Cornell University)
If used in publication cite "J. Hiller and H. Lipson "Dynamic Simulation of Soft Heterogeneous Objects" In press. (2011)"

This file is part of Voxelyze.
Voxelyze is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
Voxelyze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
See <http://www.opensource.org/licenses/lgpl-3.0.html> for license details.
*******************************************************************************/

#ifndef VX_SIM_H
#define VX_SIM_H

#include "VXS_Voxel.h"
#include "VXS_BondInternal.h"
#include "VX_Environment.h"
#include "VX_MeshUtil.h"
//#include <deque>

//!voxel objects stored in such a way as to be useful for simulation
class CVX_SimObject
{
public:
	CVX_SimObject(void); //!< Constructor
	~CVX_SimObject(void); //!< Destructor
	CVX_SimObject& operator=(const CVX_SimObject& rSim); //!< Overload "=" 

	//I/O function for save/loading
	void SaveVXAFile(std::string filename);
	bool LoadVXAFile(std::string filename, std::string* pRetMsg = NULL);

	void WriteVXA(CXML_Rip* pXML);
	bool ReadVXA(CXML_Rip* pXML, std::string* RetMessage = NULL);

	//I/O function for save/loading
	void WriteXML(CXML_Rip* pXML);
	bool ReadXML(CXML_Rip* pXML, std::string* RetMessage = NULL);
	virtual void WriteAdditionalSimXML(CXML_Rip* pXML) {};
	virtual bool ReadAdditionalSimXML(CXML_Rip* pXML, std::string* RetMessage = NULL) {return true;};


	//Simulation information
	std::vector<CVXS_Voxel> VoxArray; //!< The main array of voxels.
	bool UpdateVoxPointers(); //updates all pointers into the VoxArray (call if reallocated!)
	inline int NumVox(void) const {return (int)VoxArray.size();} //!< Returns the number of voxels in the simulation.


	std::vector<CVXS_BondInternal> BondArrayInternal; //!< The main array of bonds.

	void UpdateInternalBondPointers(); //updates all pointers into the VoxArray (call if reallocated!)
	inline int NumBond(void) const {return (int)BondArrayInternal.size();} //!< Returns the number of bonds in the simulation.

	//for using VX_Object
	std::vector<int> XtoSIndexMap; //!< Maps the global CVX_Object index to the corresponding CVX_Sim voxel index.
	std::vector<int> StoXIndexMap; //!< Maps CVX_Sim voxel index to the original global CVX_Object index.
//	int GetVoxIndex(int i, int j, int k) {return XtoSIndexMap[LocalVXC.GetIndex(i, j, k)];} //!< Returns the CVX_SIM voxel index at specified voxel location. If there is no instantiated voxel here -1 is returned. @param[in] i The X Voxel index of the desired voxel. @param[in] j The Y Voxel index of the desired voxel. @param[in] k The Z Voxel index of the desired voxel.

	//Simulation Management
	bool Import_VXObject(CVX_Environment* pEnvIn = NULL, CMesh* pSurfMeshIn = NULL, std::string* RetMessage = NULL); //!< Imports a physical environment into the simulator.
	int CreatePermBond(int SIndexNegIn, int SIndexPosIn); //!< Creates a new permanent bond between two voxels. 


	bool IsInitalized(void) {return Initalized;} //!< Returns true if a valid environment has been imported.
	void ClearAll(void); //!< Clears all environment-specific information form the simulation.


protected:
	//info used 
	//input information
	CVX_Environment* pEnv; //!< Pointer to the physical environment information. This variable is set on import() and should not be manually changed.
	CVX_Object LocalVXC; //!< Local copy of the voxel object. This copy is stored to ensure it never changes throughout the simulation. This variable is set on import() and should not be manually changed.


	bool Initalized; //!< Flag to denote if simulation is runnable. True if there is an environement successfully loaded, false otherwise.

	public:
	bool MeshAutoGenerated; //flag to know whether to save the mesh or not...
	CVX_MeshUtil SurfMesh; //local copy of any imported geometry surface mesh (optional)

};

#endif //VX_SIM_H